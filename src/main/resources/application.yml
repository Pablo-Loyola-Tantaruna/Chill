#event:
#  kafka:
#    active: true
#    producers:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      synchronize-producer:
#        topic: 'opzetfuxtproduct01'
#        properties:
#          bootstrap.servers: 'localhost:9092'
#          sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="admin-secret";SharedAccessKeyName=kafk_product_management;SharedAccessKey=1234567890;EntityPath=opzetfuxtproduct01;
#          security.protocol: SASL_SSL
#          sasl.mechanism: PLAIN
#          acks: all
#          max.block.ms: 5000
#          retries: 500
#        schema:
#          version: "1.0.0"
#          valueSchema: '{"type":"record","name":"Product","namespace":"com.zettafuxt.productmanagement","fields":[{"name":"id","type":"string"},{"name":"name","type":"string"},{"name":"description","type":"string"},{"name":"price","type":"double"},{"name":"stock","type":"int"}]}'
#spring:
#  redis:
#    host: localhost
#    port: 6379
#    password: 1234567890
#    ssl: true
#  jpa:
#    hibernate:
#      ddl-auto: update
#    #show-sql: true
#    properties:
#      hibernate:
#        dialect: org.hibernate.dialect.PostgreSQLDialect
#        format_sql: true
#        use_sql_comments: true
#  datasource:
#    url: jdbc:postgresql://localhost:5432/inventory
#    username: root
#    password: 12345
#    driver-class-name: org.postgresql.Driver
event:
  kafka:
    active: true
    producers:
      client-id: 'opzetfuxtproduct01'
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      bootstrap.servers: 'localhost:9092'
    consumers:
      group-id: 'opzetfuxtproduct01'
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      bootstrap.servers: 'localhost:9092'
spring:
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
  application:
    databases:
      mongo:
        user: root
        password: 1234567890
        host: localhost
        port: 27017
        authentication-database: admin
        database: inventory
        collection: products
      postgres:
        host: localhost
        port: 5432
        database: db-inventory
        username: postgres
        password: newpassword
  cloud:
    config:
      enabled: false
      allow-override: true
      overrideNone: true
      overrideSystemProperties: false
server:
  port: 8083
application:
  name: zetta-fuxt-service-product-management
  environment: dev
  circuit-breaker:
    sliding-window-size: 50
    minimunNumberOfCalls: 10
    permittedNumberOfCallsInHalfOpenState: 10
    waitDurationInOpenState: 5000
    failureRateThreshold: 50
  secrets:
    expiry-seconds: 60
  http-client:
    business:
      save-api:
        product-service:
          cards:
            base-url: 'https://localhost:8080/api/v1/products'
            connect-timeout: 50000
            read-timeout: 50000
            write-timeout: 50000
            component:
              default: 'product-service'
    headers:
      business-cards:
        app-name: 'ZETTA-FUXT'
        subscription-key: '1234567890'
        client-code: 'FUXT'
  notification-component:
    subject: 'Un producto fue a√±adido'
    event-type: 'NotificationCreated'
    entity-type: 'Notification'
    entity-id: 'Notification'
    scopes:
      - 'sendEmail'
    operation-type: 'Product'
    app-name: 'ZETTA-FUXT'
  errors:
    code-description-type:
      'CO0001':
        - '00'
        - 'Error al guardar el producto'
        - 'Technical'
        - 'Error inesperado intente nuevamente'
  #http:
    #logging:
      #active: true
      #level:
        #root: DEBUG
      #pattern:
        #level: "%5p [${spring.application.name}:${spring.application.instance_id:${random.value}}:%X{X-B3-TraceId:-},%X{X-B3-SpanId:-},%X{X-Span-Export:-}]"
        #file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
      #exclude-path-patterns:
        #- /swagger-resources/**
        #- /webjars/**
        #- /v2/**
        #- /swagger-ui.html/**
        #- /actuator/
        #- /swagger-ui.html
        #- /swagger2.json
        #- /favicon.ico
  #encryption:
    #enabled: true
    #spring:
      #password: 1234567890
      #salt: 1234567890
  #authorization:
    #gateway:
      #active: true
      #exclude-path-patterns:
        #- /swagger-resources/**
        #- /webjars/**
        #- /v2/**
        #- /swagger-ui.html/**
        #- /actuator/
        #- /swagger-ui.html
        #- /swagger2.json
        #- /favicon.ico

eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:password@localhots:8761/eureka
  instance:
    preferIpAddress: true
    instance:
      instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
      hostname: ${spring.application.name}:${spring.application.instance_id:${random.value}}
      leaseRenewalIntervalInSeconds: 1
      leaseExpirationDurationInSeconds: 2
#Actuator
management:
  endpoints:
    web:
      exposure:
        include: "health,prometheus"
    base-path: "/actuator/inventory"
  endpoint:
    health:
      show-details: always
  #Trancing
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    #sampling:
      #probability: 1.0
#logging:
  #active: true
  #level:
    #root: TRACE
    #org.apache.kafka: INFO
#resilence4j.circuitbreaker:
  #instances:
    #product-service:
      #baseConfig: default




